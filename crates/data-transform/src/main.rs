// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: BSD-3-Clause-Clear

use anyhow::anyhow;
use data_transform::*;
use diesel::prelude::*;
use diesel::RunQueryDsl;
use once_cell::sync::Lazy;
use std::process::exit;
use std::str::FromStr;
use std::sync::Arc;

use move_bytecode_utils::module_cache::SyncModuleCache;
use move_core_types::annotated_value::MoveStruct;
use sui_types::object::MoveObject;

use self::models::*;
use std::env;
use sui_indexer::errors::IndexerError;
use sui_indexer::new_pg_connection_pool;
use sui_indexer::store::module_resolver::IndexerModuleResolver;

use move_core_types::language_storage::ModuleId;
use move_core_types::resolver::ModuleResolver;
use std::collections::{HashMap, HashSet};
use sui_json_rpc_types::SuiMoveStruct;
use sui_types::parse_sui_struct_tag;

use tracing::debug;
extern crate base64;
use base64::engine::general_purpose::STANDARD as BASE64;
use base64::engine::Engine as _;
use move_core_types::account_address::AccountAddress;

struct GrootModuleResolver {
    module_map: HashMap<String, Vec<u8>>,
    original: IndexerModuleResolver,
}

impl GrootModuleResolver {
    fn new(blocking_cp: PgConnectionPool) -> Self {
        let original = IndexerModuleResolver::new(blocking_cp);
        let mut module_map: HashMap<String, Vec<u8>> = HashMap::new();
        let  clob = "".as_bytes();
        match BASE64.decode(clob) {
            Ok(module) => {
                module_map.insert("clob".to_string(), module);
            }
            Err(_) => {
                println!("Invalid base64 encoding for clob");
            }
        }
        let  clob_v2 = "".as_bytes();
        match BASE64.decode(clob_v2) {
            Ok(module) => {
                module_map.insert("clob_v2".to_string(), module);
            }
            Err(_err) => {
                println!("Invalid base64 encoding for clob_v2");
            }
        }
        let critbit = "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".as_bytes();
        match BASE64.decode(critbit) {
            Ok(module) => {
                module_map.insert("critbit".to_string(), module);
            }
            Err(_err) => {
                println!("Invalid base64 encoding for critbit");
            }
        }
        let custodian = "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".as_bytes();
        match BASE64.decode(custodian) {
            Ok(module) => {
                module_map.insert("custodian".to_string(), module);
            }
            Err(_err) => {
                println!("Invalid base64 encoding for custodian");
            }
        }
        let custodian_v2 = "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".as_bytes();
        match BASE64.decode(custodian_v2) {
            Ok(module) => {
                module_map.insert("custodian_v2".to_string(), module);
            }
            Err(_err) => {
                println!("Invalid base64 encoding for custodian_v2");
            }
        }
        let math = "oRzrCwYAAAAIAQACAwIoBSoUBz5+CLwBIAbcASYMggK3BQ+5BwYABQAKAAEAAAsAAgAABgABAAAHAAIAAAgAAQAACQACAAAEAAIAAAIDBAACAwMBAwIBAwEEAQIAAwEEBAICAgRjbG9iB2Nsb2JfdjITY291bnRfbGVhZGluZ196ZXJvcwdjcml0Yml0CWRpdl9yb3VuZARtYXRoA211bAltdWxfcm91bmQKdW5zYWZlX2RpdhB1bnNhZmVfZGl2X3JvdW5kCnVuc2FmZV9tdWwQdW5zYWZlX211bF9yb3VuZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN7pAwgAypo7AAAAAAQQAMqaOwAAAAAAAAAAAAAAAAMIAQAAAAAAAAAAAwAAAQcLAAsBEQEMAgELAgIBAwAABhoLADUMAwsBNQwECAwCCgMKBBgHARkyAAAAAAAAAAAAAAAAAAAAACEEEgkMAgsCCwMLBBgHARo0AgIBAAABDgsACwERAQwCAQoCBgAAAAAAAAAAJAQKBQwHAicLAgIDAQAAAg8LAAsBEQEMAwwCCgMGAAAAAAAAAAAkBAoFDAcCJwsCCwMCBAMAAAEHCwALAREFDAIBCwICBQMAAAYcCwA1DAMLATUMBAgMAgoDBwA1GAoEGTIAAAAAAAAAAAAAAAAAAAAAIQQTCQwCCwILAwcANRgLBBo0AgYBAAACDwsACwERBQwDDAIKAwYAAAAAAAAAACQECgUMBwInCwILAwIHAwAAB2sKADIAAAAAAAAAAAAAAAAAAAAAIQQHMYAMAQVpMQAMAgoAMgAAAAAAAAAA//////////8cMgAAAAAAAAAAAAAAAAAAAAAhBBcLADFALwwACwIxQBYMAgoAMgAAAAAAAAAAAAAAAP////8cMgAAAAAAAAAAAAAAAAAAAAAhBCULADEgLwwACwIxIBYMAgoAMgAAAAAAAAAAAAAAAAAA//8cMgAAAAAAAAAAAAAAAAAAAAAhBDMLADEQLwwACwIxEBYMAgoAMgAAAAAAAAAAAAAAAAAAAP8cMgAAAAAAAAAAAAAAAAAAAAAhBEELADEILwwACwIxCBYMAgoAMgAAAAAAAAAAAAAAAAAAAPAcMgAAAAAAAAAAAAAAAAAAAAAhBE8LADEELwwACwIxBBYMAgoAMgAAAAAAAAAAAAAAAAAAAMAcMgAAAAAAAAAAAAAAAAAAAAAhBF0LADECLwwACwIxAhYMAgsAMgAAAAAAAAAAAAAAAAAAAIAcMgAAAAAAAAAAAAAAAAAAAAAhBGcLAjEBFgwCCwIMAQsBAgAAAAEAAwA=".as_bytes();
        match BASE64.decode(math) {
            Ok(module) => {
                module_map.insert("math".to_string(), module);
            }
            Err(_err) => {
                println!("Invalid base64 encoding for math");
            }
        }
        Self {
            module_map,
            original,
        }
    }
}

impl ModuleResolver for GrootModuleResolver {
    type Error = IndexerError;

    fn get_module(&self, id: &ModuleId) -> Result<Option<Vec<u8>>, Self::Error> {
        let address = id.address();
        println!("address = {}", address);
        if is_deepbook(address) {
            let module_name = id.name().to_string();
            println!("i am groot, module_name: {}", module_name);
            Ok(self.module_map.get(&module_name).cloned())
        } else {
            let mapped_address = map_typus_address(address);
            let module_id = ModuleId::new(mapped_address, id.name().to_owned());
            if &module_id != id {
                println!("remapped module from {:#?} to {:#?}", id, module_id);
            }
            self.original.get_module(&module_id)
        }
    }
}

static DEEPBOOK: Lazy<AccountAddress> = Lazy::new(|| {
    AccountAddress::from_str("0x000000000000000000000000000000000000000000000000000000000000dee9")
        .unwrap()
});

fn is_deepbook(address: &AccountAddress) -> bool {
    address == &*DEEPBOOK
}

static TYPUS_LATEST: Lazy<AccountAddress> = Lazy::new(|| {
    AccountAddress::from_str("0xec2cc88cc1ba1da7a936ece33417634e18618e6898e496a3493d8f58d97e705b")
        .unwrap()
});

static TYPUS_ADDRESS_SET: Lazy<HashSet<AccountAddress>> = Lazy::new(|| {
    let mut set = HashSet::new();
    set.insert(
        AccountAddress::from_str(
            "0xa76499eda1d37751473de5f30e106f35943ada2f6ea764861243e7f5aa5bcc97",
        )
        .unwrap(),
    );
    set.insert(
        AccountAddress::from_str(
            "0xfbdf925b067055a8a3ddac9739a56e61aea41f38345926b6034aa5645f5f7068",
        )
        .unwrap(),
    );
    set.insert(
        AccountAddress::from_str(
            "0x4db258013df88d79fde54eb0ecdec2bb1865c4585a897d7c1c9d20b6b768a71b",
        )
        .unwrap(),
    );
    set.insert(
        AccountAddress::from_str(
            "0xf84c82986dad0b89731ced890226639c8c1859f5b61f12394548c48706bcf04c",
        )
        .unwrap(),
    );
    set.insert(
        AccountAddress::from_str(
            "0xa390965beb1f120a469183ac10ccbac83e78dd7f505e9dcc803a93c7a079d9fd",
        )
        .unwrap(),
    );
    set.insert(
        AccountAddress::from_str(
            "0xf0ba0f41946081992325cbc52a73ded90aa969b868ce9f907dd60d5e7ad8698",
        )
        .unwrap(),
    );
    set.insert(
        AccountAddress::from_str(
            "0x5a8d167ae1279043c73a8a0d383c6a07f20c5dc3c1309ba560f89028447dc284",
        )
        .unwrap(),
    );
    set.insert(
        AccountAddress::from_str(
            "0xd95d83e5fdef4a5c042270e4a97e1284658bf0057f00f4989f9c13f56b7afed4",
        )
        .unwrap(),
    );
    set
});

fn map_typus_address(address: &AccountAddress) -> AccountAddress {
    if TYPUS_ADDRESS_SET.contains(address) {
        *TYPUS_LATEST
    } else {
        *address
    }
}

fn main() {
    use self::schema::events::dsl::*;
    use self::schema::events_json::dsl::*;

    // get the starting id from the arguments
    let args: Vec<String> = env::args().collect();

    if args.len() < 2 {
        eprintln!("Usage: data-transform <id>");
        exit(0);
    }

    let start_id: i64 = match args[1].parse() {
        Ok(num) => num,
        Err(_) => {
            eprintln!("Invalid integer: {}", args[1]);
            exit(0);
        }
    };

    println!("start id = {}", start_id);

    //let mut end_id: i64 = start_id +1;

    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");
    let connection = &mut establish_connection();

    let blocking_cp = new_pg_connection_pool(&database_url)
        .map_err(|e| anyhow!("Unable to connect to Postgres, is it running? {e}"));
    //let module_cache = Arc::new(SyncModuleCache::new(IndexerModuleResolver::new(blocking_cp.expect("REASON").clone())));
    //
    let module_cache = Arc::new(SyncModuleCache::new(GrootModuleResolver::new(
        blocking_cp.expect("REASON"),
    )));

    for target_id in start_id.. {
        let event = events
            .find(target_id)
            .select(Event::as_select())
            .first(connection)
            .optional();

        match event {
            Ok(Some(event)) => {
                println!("-----------\n");
                println!("event id = {}", event.id);
                debug!("event sequence = {:#?}", event.event_sequence);
                debug!("sender = {:#?}", event.sender);
                println!("package = {:#?}", event.package);
                debug!("module = {:#?}", event.module);
                debug!("type = {:#?}", event.event_type);
                let text = String::from_utf8_lossy(&event.event_bcs);
                debug!("bcs in text = {:#?}", text);

                /*
                if event.package != "0x000000000000000000000000000000000000000000000000000000000000dee9" {
                    println!("not deepbook skipping...");
                    continue;
                }
                */

                // check for the previous record in events_json
                let eventj = events_json
                    .find(target_id)
                    .select(EventsJson::as_select())
                    .first(connection)
                    .optional();

                match eventj {
                    Ok(Some(_eventj)) => {
                        println!("Already processed {}, skipping...", target_id);
                        continue;
                    }
                    Ok(None) => {
                        println!("Unable to find event_json {}", target_id);
                    }
                    Err(_) => {
                        println!("An error occured while fetching event_json {}", target_id);
                    }
                }

                // JSON parsing starts here
                let type_ = parse_sui_struct_tag(&event.event_type).expect("cannot load StructTag");

                let layout = MoveObject::get_layout_from_struct_tag(type_.clone(), &module_cache);

                match layout {
                    Ok(l) => {
                        let move_object = MoveStruct::simple_deserialize(&event.event_bcs, &l)
                            .map_err(|e| IndexerError::SerdeError(e.to_string()));

                        match move_object {
                            Ok(m) => {
                                let parsed_json = SuiMoveStruct::from(m).to_json_value();
                                let final_result =
                                    serde_json::to_string_pretty(&parsed_json).unwrap();
                                println!("event json = {}", final_result);

                                let new_event_json = EventsJson {
                                    id: event.id,
                                    event_json: final_result,
                                };

                                let _inserted_event_json = diesel::insert_into(events_json)
                                    .values(&new_event_json)
                                    .execute(connection)
                                    .expect("Error saving new events json");

                                println!("Inserted new event_json id: {}", event.id);
                            }
                            Err(e) => {
                                println!("error in deserialize:{} {}", e, type_);
                                continue;
                            }
                        }
                    }
                    Err(err) => {
                        println!("error in get_layout: {} {}", err, type_);
                        continue;
                    }
                }
            }
            Ok(None) => {
                println!("error unable to find event {}", target_id);
                exit(0);
            }
            Err(_) => {
                println!("An error occured while fetching event {}", target_id);
                exit(0);
            }
        }
    }
}
