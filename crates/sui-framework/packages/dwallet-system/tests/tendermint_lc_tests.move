#[test_only]
module dwallet_system::lc_tests {
    use dwallet_system::tendermint_lc::tendermint_state_proof;
    

    const SENDER: address = @0x012;

    use dwallet::test_scenario;
    // use dwallet::dynamic_field as fields;
    use dwallet::test_utils::{Self};
    use dwallet_system::tendermint_lc::{init_lc, Self};

    fun sample_header(): vector<u8> {
        let header = vector[10, 38, 47, 105, 98, 99, 46, 108, 105, 103, 104, 116, 99, 108, 105, 101, 110, 116, 115, 46, 116, 101, 110, 100, 101, 114, 109, 105, 110, 116, 46, 118, 49, 46, 72, 101, 97, 100, 101, 114, 18, 144, 6, 10, 199, 4, 10, 139, 3, 10, 2, 8, 11, 18, 5, 105, 98, 99, 45, 48, 24, 10, 34, 12, 8, 249, 155, 196, 180, 6, 16, 214, 141, 149, 201, 1, 42, 72, 10, 32, 63, 110, 249, 22, 37, 107, 4, 75, 18, 162, 42, 21, 137, 99, 96, 240, 140, 200, 164, 161, 197, 55, 82, 220, 12, 174, 214, 112, 190, 53, 187, 231, 18, 36, 8, 1, 18, 32, 63, 17, 171, 213, 32, 225, 117, 142, 144, 231, 129, 73, 131, 68, 42, 59, 142, 254, 9, 251, 254, 195, 178, 215, 71, 68, 130, 48, 81, 182, 173, 27, 50, 32, 79, 252, 108, 15, 8, 169, 4, 11, 254, 17, 5, 82, 82, 3, 95, 94, 64, 100, 45, 199, 96, 184, 218, 1, 223, 108, 12, 217, 162, 68, 213, 49, 58, 32, 227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85, 66, 32, 21, 60, 28, 187, 0, 190, 203, 52, 31, 17, 78, 57, 164, 96, 36, 158, 242, 75, 82, 181, 40, 107, 205, 43, 108, 57, 226, 105, 169, 115, 88, 23, 74, 32, 21, 60, 28, 187, 0, 190, 203, 52, 31, 17, 78, 57, 164, 96, 36, 158, 242, 75, 82, 181, 40, 107, 205, 43, 108, 57, 226, 105, 169, 115, 88, 23, 82, 32, 4, 128, 145, 188, 125, 220, 40, 63, 119, 191, 191, 145, 215, 60, 68, 218, 88, 195, 223, 138, 156, 188, 134, 116, 5, 216, 183, 243, 218, 173, 162, 47, 90, 32, 250, 205, 108, 46, 129, 229, 203, 91, 142, 79, 196, 93, 168, 227, 138, 45, 70, 86, 220, 18, 86, 11, 244, 226, 125, 168, 129, 42, 96, 98, 29, 246, 98, 32, 227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85, 106, 32, 227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85, 114, 20, 253, 79, 239, 42, 177, 84, 60, 49, 154, 2, 214, 137, 47, 128, 252, 111, 118, 173, 102, 61, 18, 182, 1, 8, 10, 26, 72, 10, 32, 182, 194, 136, 163, 170, 30, 176, 72, 77, 144, 162, 93, 116, 0, 128, 219, 23, 65, 152, 46, 8, 233, 167, 190, 246, 111, 27, 253, 156, 21, 122, 191, 18, 36, 8, 1, 18, 32, 131, 179, 33, 203, 78, 37, 147, 21, 113, 137, 157, 31, 230, 54, 116, 49, 161, 8, 119, 182, 20, 245, 145, 205, 203, 204, 2, 17, 204, 161, 227, 25, 34, 104, 8, 2, 18, 20, 253, 79, 239, 42, 177, 84, 60, 49, 154, 2, 214, 137, 47, 128, 252, 111, 118, 173, 102, 61, 26, 12, 8, 254, 155, 196, 180, 6, 16, 188, 190, 166, 206, 1, 34, 64, 254, 26, 184, 18, 153, 193, 115, 190, 24, 74, 69, 20, 214, 195, 117, 2, 7, 146, 60, 145, 211, 81, 87, 230, 171, 194, 245, 36, 55, 104, 3, 43, 12, 158, 169, 216, 144, 75, 143, 171, 98, 168, 177, 93, 1, 121, 168, 26, 5, 190, 88, 238, 31, 39, 252, 145, 30, 218, 179, 46, 40, 167, 198, 12, 18, 126, 10, 60, 10, 20, 253, 79, 239, 42, 177, 84, 60, 49, 154, 2, 214, 137, 47, 128, 252, 111, 118, 173, 102, 61, 18, 34, 10, 32, 100, 86, 35, 36, 181, 186, 222, 9, 123, 142, 243, 70, 224, 128, 72, 121, 143, 202, 62, 242, 101, 37, 230, 199, 28, 130, 172, 74, 226, 98, 211, 65, 24, 1, 18, 60, 10, 20, 253, 79, 239, 42, 177, 84, 60, 49, 154, 2, 214, 137, 47, 128, 252, 111, 118, 173, 102, 61, 18, 34, 10, 32, 100, 86, 35, 36, 181, 186, 222, 9, 123, 142, 243, 70, 224, 128, 72, 121, 143, 202, 62, 242, 101, 37, 230, 199, 28, 130, 172, 74, 226, 98, 211, 65, 24, 1, 24, 1, 26, 2, 16, 6, 34, 64, 10, 60, 10, 20, 253, 79, 239, 42, 177, 84, 60, 49, 154, 2, 214, 137, 47, 128, 252, 111, 118, 173, 102, 61, 18, 34, 10, 32, 100, 86, 35, 36, 181, 186, 222, 9, 123, 142, 243, 70, 224, 128, 72, 121, 143, 202, 62, 242, 101, 37, 230, 199, 28, 130, 172, 74, 226, 98, 211, 65, 24, 1, 24, 1];
        return header
    }

    fun set_up(): (u64, vector<u8>, vector<u8>, vector<u8>) { 
        // data from local chain. please check https://github.com/gonative-cc/tendermint-lightclient for more details
        let height = 6;
        let timestamp: vector<u8> = vector[50, 48, 50, 52, 45, 48, 55, 45, 49, 50, 84, 49, 49, 58, 48, 53, 58, 48, 57, 46, 51, 54, 54, 56, 52, 57, 49, 48, 52, 90];
        let next_validators_hash : vector<u8> = vector[21, 60, 28, 187, 0, 190, 203, 52, 31, 17, 78, 57, 164, 96, 36, 158, 242, 75, 82, 181, 40, 107, 205, 43, 108, 57, 226, 105, 169, 115, 88, 23];
        let root: vector<u8> = vector[250, 71, 122, 95, 80, 76, 172, 76, 196, 66, 160, 101, 147, 54, 30, 152, 195, 50, 162, 105, 97, 187, 215, 244, 26, 19, 62, 215, 255, 219, 119, 109];

        (
            height, 
            timestamp, 
            next_validators_hash,
            root
        )
    }


    #[test]
    fun tendermint_init_lc_test() {
        let scenario = test_scenario::begin(SENDER);
        let height = 4;

        let timestamp: vector<u8> = vector[1];
        let next_validators_hash : vector<u8> = vector[2];
        let root: vector<u8> = vector[3];
        let ctx = test_scenario::ctx(&mut scenario);
        let client = init_lc(height, timestamp, next_validators_hash, root, ctx);
        
        assert!(tendermint_lc::latest_height(&client) == height, 0);
        test_scenario::end(scenario);
        test_utils::destroy(client);
    }
    #[test]
    fun tendermint_verify_lc_test() {
        let scenario = test_scenario::begin(SENDER);

        let (height, timestamp, next_validators_hash, root) = set_up();
        let ctx = test_scenario::ctx(&mut scenario);
        let client = init_lc(height, timestamp, next_validators_hash, root, ctx);
        assert!(tendermint_lc::latest_height(&client) == height, 0);
        let header = sample_header();
        let ans = tendermint_lc::verify_lc(&client, header);

        assert!(ans == true, 0);
        test_scenario::end(scenario);
        test_utils::destroy(client);
    }

    #[test] 
    fun extract_consensus_state_test() {
        let header = sample_header();
        let cs = tendermint_lc::extract_consensus_state(header);

        // data from header, we already convert it to bytes.
        let next_validators_hash = vector[21, 60, 28, 187, 0, 190, 203, 52, 31, 17, 78, 57, 164, 96, 36, 158, 242, 75, 82, 181, 40, 107, 205, 43, 108, 57, 226, 105, 169, 115, 88, 23];
        let root = vector[250, 205, 108, 46, 129, 229, 203, 91, 142, 79, 196, 93, 168, 227, 138, 45, 70, 86, 220, 18, 86, 11, 244, 226, 125, 168, 129, 42, 96, 98, 29, 246];
        let timestamp = vector[10, 41, 84, 105, 109, 101, 115, 116, 97, 109, 112, 40, 50, 48, 50, 52, 45, 48, 55, 45, 49, 50, 84, 49, 49, 58, 48, 53, 58, 50, 57, 46, 52, 50, 49, 56, 55, 51, 51, 54, 54, 90, 41];
        
        assert!(tendermint_lc::height(&cs) == 10, 0);
        assert!(tendermint_lc::commitment_root(&cs) == root, 0);
        assert!(tendermint_lc::timestamp(&cs) == timestamp, 0);
        assert!(tendermint_lc::next_validators_hash(&cs) == next_validators_hash, 0);
    }
    #[test]
    fun tendermint_update_lc_test() {
        let scenario = test_scenario::begin(SENDER);
        let (height, timestamp, next_validators_hash, root) = set_up();

        let ctx = test_scenario::ctx(&mut scenario);
        let client = init_lc(height, timestamp, next_validators_hash, root, ctx);
        
        assert!(tendermint_lc::latest_height(&client) == height, 0);
        let header = sample_header();

        // shouldn't return error
        tendermint_lc::update_lc(&mut client, header);
        test_scenario::end(scenario);
        test_utils::destroy(client);
    }

        #[test]
    fun tendermint_state_proof_test() {
        // data from this tx https://www.mintscan.io/cosmos/tx/A0E69441FB46C5797C1193D6EAA7EB5A59A809F0433ECA6CE29D7CD3DEFED679?height=21413592&sector=json
        let root = vector[64, 219, 231, 75, 96, 63, 254, 86, 135, 18, 53, 189, 169, 80, 121, 135, 38, 184, 204, 224, 178, 186, 3, 136, 93, 78, 47, 139, 75, 231, 7, 12];
        let prefix = vector[105, 98, 99];
        let path = vector[99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 47, 112, 111, 114, 116, 115, 47, 116, 114, 97, 110, 115, 102, 101, 114, 47, 99, 104, 97, 110, 110, 101, 108, 115, 47, 99, 104, 97, 110, 110, 101, 108, 45, 48, 47, 115, 101, 113, 117, 101, 110, 99, 101, 115, 47, 51, 53, 49, 52, 54, 51, 50];
        let value = vector[168, 189, 157, 253, 192, 103, 107, 255, 68, 175, 251, 254, 247, 185, 164, 133, 63, 27, 114, 203, 33, 220, 123, 56, 56, 183, 14, 221, 149, 0, 16, 184];
        let proof = vector[10, 177, 10, 10, 174, 10, 10, 63, 99, 111, 109, 109, 105, 116, 109, 101, 110, 116, 115, 47, 112, 111, 114, 116, 115, 47, 116, 114, 97, 110, 115, 102, 101, 114, 47, 99, 104, 97, 110, 110, 101, 108, 115, 47, 99, 104, 97, 110, 110, 101, 108, 45, 48, 47, 115, 101, 113, 117, 101, 110, 99, 101, 115, 47, 51, 53, 49, 52, 54, 51, 50, 18, 32, 168, 189, 157, 253, 192, 103, 107, 255, 68, 175, 251, 254, 247, 185, 164, 133, 63, 27, 114, 203, 33, 220, 123, 56, 56, 183, 14, 221, 149, 0, 16, 184, 26, 14, 8, 1, 24, 1, 32, 1, 42, 6, 0, 2, 154, 135, 188, 17, 34, 44, 8, 1, 18, 40, 2, 4, 154, 135, 188, 17, 32, 64, 162, 154, 73, 240, 5, 135, 238, 224, 152, 168, 174, 13, 70, 16, 47, 85, 163, 185, 245, 141, 202, 160, 66, 230, 155, 241, 30, 3, 192, 218, 83, 32, 34, 44, 8, 1, 18, 40, 4, 6, 154, 135, 188, 17, 32, 229, 167, 140, 221, 63, 165, 37, 116, 145, 114, 214, 172, 34, 148, 136, 26, 50, 235, 60, 79, 191, 3, 220, 94, 227, 62, 91, 246, 13, 197, 185, 113, 32, 34, 44, 8, 1, 18, 40, 6, 14, 154, 135, 188, 17, 32, 205, 108, 113, 243, 49, 199, 159, 154, 254, 132, 250, 26, 122, 79, 170, 78, 113, 166, 214, 26, 78, 239, 94, 55, 228, 215, 82, 68, 96, 35, 182, 52, 32, 34, 46, 8, 1, 18, 7, 8, 20, 154, 135, 188, 17, 32, 26, 33, 32, 198, 41, 70, 214, 172, 50, 208, 146, 214, 137, 92, 77, 213, 204, 252, 25, 69, 164, 139, 2, 247, 65, 0, 101, 25, 174, 179, 216, 35, 255, 150, 106, 34, 46, 8, 1, 18, 7, 10, 44, 154, 135, 188, 17, 32, 26, 33, 32, 136, 127, 82, 21, 236, 220, 174, 145, 42, 223, 229, 195, 31, 244, 164, 69, 145, 211, 10, 170, 140, 63, 205, 76, 213, 244, 71, 59, 109, 152, 27, 164, 34, 45, 8, 1, 18, 41, 14, 130, 1, 154, 135, 188, 17, 32, 173, 147, 134, 98, 117, 11, 116, 173, 3, 177, 165, 41, 200, 19, 141, 160, 126, 250, 18, 247, 121, 120, 213, 41, 78, 129, 248, 30, 215, 84, 120, 60, 32, 34, 47, 8, 1, 18, 8, 16, 202, 1, 154, 135, 188, 17, 32, 26, 33, 32, 223, 65, 185, 229, 158, 134, 141, 243, 11, 91, 247, 44, 232, 122, 150, 7, 19, 135, 203, 209, 188, 189, 56, 227, 123, 99, 75, 4, 163, 0, 192, 138, 34, 45, 8, 1, 18, 41, 18, 180, 3, 154, 135, 188, 17, 32, 141, 51, 160, 191, 115, 29, 175, 252, 214, 87, 62, 141, 136, 161, 163, 90, 127, 195, 123, 164, 203, 179, 90, 240, 253, 70, 27, 230, 144, 8, 74, 120, 32, 34, 45, 8, 1, 18, 41, 20, 206, 7, 154, 135, 188, 17, 32, 108, 81, 160, 18, 214, 50, 23, 247, 22, 41, 239, 177, 142, 94, 12, 87, 224, 116, 108, 26, 239, 123, 63, 98, 58, 5, 132, 63, 228, 178, 172, 81, 32, 34, 45, 8, 1, 18, 41, 22, 198, 19, 154, 135, 188, 17, 32, 31, 149, 12, 119, 212, 103, 201, 179, 81, 200, 155, 16, 166, 89, 35, 167, 39, 94, 1, 151, 85, 110, 149, 223, 231, 130, 220, 175, 126, 8, 212, 46, 32, 34, 45, 8, 1, 18, 41, 24, 156, 43, 154, 135, 188, 17, 32, 114, 79, 170, 227, 253, 78, 73, 156, 136, 8, 18, 164, 154, 255, 113, 173, 223, 123, 200, 192, 85, 212, 182, 86, 73, 106, 150, 123, 228, 255, 205, 77, 32, 34, 45, 8, 1, 18, 41, 26, 250, 65, 154, 135, 188, 17, 32, 181, 164, 41, 32, 216, 72, 200, 26, 75, 210, 0, 189, 179, 241, 147, 106, 115, 209, 153, 37, 243, 176, 90, 244, 53, 186, 227, 49, 125, 212, 35, 177, 32, 34, 48, 8, 1, 18, 9, 30, 150, 144, 1, 154, 135, 188, 17, 32, 26, 33, 32, 241, 151, 246, 70, 106, 237, 73, 220, 21, 193, 82, 172, 50, 246, 78, 231, 56, 63, 142, 161, 200, 245, 4, 31, 249, 236, 245, 218, 157, 251, 13, 231, 34, 48, 8, 1, 18, 9, 32, 174, 211, 2, 154, 135, 188, 17, 32, 26, 33, 32, 74, 103, 22, 253, 70, 140, 86, 197, 178, 161, 56, 219, 220, 223, 102, 34, 159, 57, 62, 191, 254, 174, 57, 13, 65, 82, 60, 186, 216, 245, 10, 3, 34, 46, 8, 1, 18, 42, 34, 152, 241, 5, 154, 135, 188, 17, 32, 65, 165, 171, 24, 27, 203, 195, 141, 189, 187, 225, 55, 206, 192, 130, 219, 75, 30, 185, 13, 138, 224, 218, 124, 10, 4, 208, 119, 197, 97, 44, 68, 32, 34, 48, 8, 1, 18, 9, 36, 164, 206, 7, 154, 135, 188, 17, 32, 26, 33, 32, 255, 187, 226, 9, 185, 119, 67, 88, 239, 105, 70, 68, 60, 92, 255, 218, 12, 59, 146, 122, 72, 125, 31, 169, 82, 148, 31, 110, 167, 166, 188, 207, 34, 46, 8, 1, 18, 42, 38, 184, 163, 15, 154, 135, 188, 17, 32, 113, 208, 124, 214, 175, 111, 199, 231, 13, 137, 5, 94, 230, 24, 164, 104, 9, 61, 167, 99, 118, 218, 12, 102, 215, 96, 184, 129, 254, 18, 24, 160, 32, 34, 48, 8, 1, 18, 9, 42, 232, 156, 33, 154, 135, 188, 17, 32, 26, 33, 32, 32, 68, 181, 231, 43, 158, 126, 165, 96, 25, 60, 106, 228, 233, 189, 89, 62, 211, 176, 49, 204, 178, 158, 196, 5, 169, 162, 102, 99, 84, 164, 202, 34, 48, 8, 1, 18, 9, 44, 160, 201, 73, 154, 135, 188, 17, 32, 26, 33, 32, 60, 239, 140, 195, 218, 213, 42, 244, 31, 85, 112, 113, 22, 217, 212, 235, 241, 93, 118, 111, 207, 144, 88, 109, 57, 119, 60, 78, 122, 95, 52, 203, 34, 47, 8, 1, 18, 43, 46, 158, 212, 195, 1, 154, 135, 188, 17, 32, 249, 106, 194, 52, 198, 191, 152, 4, 77, 233, 175, 4, 225, 192, 210, 239, 53, 254, 167, 73, 55, 111, 225, 166, 137, 194, 254, 20, 149, 54, 186, 222, 32, 34, 49, 8, 1, 18, 10, 48, 132, 163, 149, 2, 154, 135, 188, 17, 32, 26, 33, 32, 41, 94, 85, 161, 27, 30, 216, 39, 69, 187, 154, 193, 65, 241, 70, 119, 113, 198, 247, 224, 13, 176, 138, 219, 135, 72, 51, 77, 192, 47, 175, 82, 34, 47, 8, 1, 18, 43, 50, 148, 175, 137, 7, 154, 135, 188, 17, 32, 81, 138, 208, 64, 65, 132, 84, 192, 139, 176, 197, 58, 22, 25, 75, 178, 146, 52, 144, 255, 123, 254, 81, 59, 164, 113, 138, 124, 24, 183, 195, 196, 32, 34, 49, 8, 1, 18, 10, 54, 250, 176, 134, 11, 154, 135, 188, 17, 32, 26, 33, 32, 46, 63, 247, 23, 249, 93, 143, 115, 85, 10, 221, 61, 221, 187, 183, 42, 75, 231, 102, 98, 29, 202, 37, 5, 121, 179, 46, 190, 236, 148, 111, 50, 34, 49, 8, 1, 18, 10, 58, 164, 238, 195, 23, 154, 135, 188, 17, 32, 26, 33, 32, 247, 51, 57, 184, 129, 213, 34, 232, 171, 224, 67, 254, 128, 139, 32, 109, 176, 78, 86, 108, 197, 24, 14, 241, 255, 159, 56, 170, 180, 95, 9, 99, 34, 47, 8, 1, 18, 43, 60, 216, 168, 226, 41, 154, 135, 188, 17, 32, 191, 235, 197, 18, 239, 38, 127, 36, 140, 77, 51, 41, 11, 26, 192, 177, 173, 189, 117, 103, 107, 253, 113, 13, 18, 18, 7, 71, 66, 35, 67, 18, 32, 10, 167, 2, 10, 164, 2, 10, 3, 105, 98, 99, 18, 32, 164, 55, 119, 205, 145, 132, 139, 48, 57, 131, 119, 214, 3, 13, 160, 199, 33, 68, 22, 57, 53, 231, 204, 72, 15, 224, 203, 241, 44, 73, 28, 24, 26, 9, 8, 1, 24, 1, 32, 1, 42, 1, 0, 34, 37, 8, 1, 18, 33, 1, 42, 59, 162, 136, 218, 137, 190, 89, 99, 199, 189, 113, 99, 108, 170, 254, 44, 21, 21, 84, 49, 62, 179, 146, 189, 244, 1, 42, 9, 195, 87, 101, 34, 39, 8, 1, 18, 1, 1, 26, 32, 71, 94, 248, 218, 184, 100, 98, 227, 154, 235, 40, 253, 98, 89, 4, 161, 207, 114, 48, 176, 227, 6, 213, 158, 126, 136, 241, 184, 158, 71, 12, 148, 34, 39, 8, 1, 18, 1, 1, 26, 32, 243, 45, 110, 111, 160, 102, 244, 232, 39, 58, 19, 128, 2, 154, 196, 142, 66, 226, 236, 219, 190, 116, 70, 12, 148, 131, 46, 236, 227, 250, 170, 17, 34, 39, 8, 1, 18, 1, 1, 26, 32, 169, 9, 126, 118, 158, 141, 133, 133, 224, 241, 220, 237, 229, 248, 125, 25, 76, 97, 117, 70, 46, 190, 235, 137, 116, 83, 210, 74, 0, 158, 203, 26, 34, 37, 8, 1, 18, 33, 1, 78, 85, 55, 146, 206, 103, 139, 148, 47, 47, 48, 43, 192, 248, 201, 5, 206, 123, 125, 43, 199, 40, 57, 232, 34, 76, 106, 25, 233, 65, 25, 253, 34, 39, 8, 1, 18, 1, 1, 26, 32, 162, 44, 148, 33, 122, 83, 65, 65, 18, 219, 15, 101, 149, 14, 101, 187, 131, 14, 196, 134, 96, 4, 14, 45, 234, 71, 116, 61, 70, 104, 228, 19];
        let result = tendermint_state_proof(proof, root, prefix, path, value);
        assert!(result == true, 0);
    }

}